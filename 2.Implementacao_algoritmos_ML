{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-11T16:03:24.245855Z",
     "iopub.status.busy": "2022-12-11T16:03:24.245162Z",
     "iopub.status.idle": "2022-12-11T16:03:24.270375Z",
     "shell.execute_reply": "2022-12-11T16:03:24.269547Z",
     "shell.execute_reply.started": "2022-12-11T16:03:24.245770Z"
    }
   },
   "source": [
    "# Projeto Final - Big Data Science - Semantix (Dez.2022)\n",
    "# <b>Análise da base de dados do ENEM 2021</b>\n",
    "## O modelo de ML prevê a nota final do aluno a partir de informações pessoais e das respostas ao questionário socio-econômico \n",
    "### Calcula uma estimativa de qual será a nota, antes do aluno fazer qualquer prova, somente pelas informações respondidas no processo de inscrição."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-13T02:30:49.692490Z",
     "iopub.status.busy": "2022-12-13T02:30:49.691903Z",
     "iopub.status.idle": "2022-12-13T02:30:49.700384Z",
     "shell.execute_reply": "2022-12-13T02:30:49.699079Z",
     "shell.execute_reply.started": "2022-12-13T02:30:49.692402Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sb\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "sb.set(rc={'figure.figsize':(20,15)})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T12:19:49.299134Z",
     "iopub.status.busy": "2022-12-12T12:19:49.298750Z",
     "iopub.status.idle": "2022-12-12T12:19:54.593291Z",
     "shell.execute_reply": "2022-12-12T12:19:54.592306Z",
     "shell.execute_reply.started": "2022-12-12T12:19:49.299104Z"
    }
   },
   "outputs": [],
   "source": [
    "# A base de dados é um arquivo de 2.238.106 registros de alunos que prestaram a prova do ENEM2021,\n",
    "#    contendo respostas categorizadas à 33 perguntas pessoais preenchidas na inscrição para a prova.\n",
    "# São 8 colunas com informações pessoais (faixa etária, sexo, estado civil, etc.)\n",
    "#    e mais as respostas às 25 perguntas de um questionário socio-econômico.\n",
    "# A última coluna, NOTA_FINAL, apresenta a média das notas obtidas por cada aluno nas quatro provas mais redação.\n",
    "\n",
    "# Para detalhes sobre a análise e tratamento da base de dados original e a definição dos campos a serem\n",
    "#    serem utilizados, veja o arquivo '1.Analise_tratamento_testes_dos_dados.ipynb'\n",
    "#    disponível em: https://github.com/crobertocamilo/Analise-dados-ENEM_Projeto-Final_BigData_Science-Semantix\n",
    "\n",
    "# Fonte original do dataset: os dados aqui utilizados estão publicamente disponíveis em:\n",
    "#    https://www.gov.br/inep/pt-br/acesso-a-informacao/dados-abertos/microdados/enem\n",
    "\n",
    "arquivo = '/kaggle/input/dados-enem2021-filtrados/Dados_ENEM2021_filtrados_novo.csv'\n",
    "dados3 = pd.read_csv(arquivo, sep=';')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T12:19:54.595501Z",
     "iopub.status.busy": "2022-12-12T12:19:54.595137Z",
     "iopub.status.idle": "2022-12-12T12:19:54.876378Z",
     "shell.execute_reply": "2022-12-12T12:19:54.875301Z",
     "shell.execute_reply.started": "2022-12-12T12:19:54.595475Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TP_FAIXA_ETARIA</th>\n",
       "      <th>TP_SEXO</th>\n",
       "      <th>TP_ESTADO_CIVIL</th>\n",
       "      <th>TP_COR_RACA</th>\n",
       "      <th>TP_ST_CONCLUSAO</th>\n",
       "      <th>IN_TREINEIRO</th>\n",
       "      <th>CO_UF_PROVA</th>\n",
       "      <th>TP_LINGUA</th>\n",
       "      <th>Q001</th>\n",
       "      <th>Q002</th>\n",
       "      <th>...</th>\n",
       "      <th>Q017</th>\n",
       "      <th>Q018</th>\n",
       "      <th>Q019</th>\n",
       "      <th>Q020</th>\n",
       "      <th>Q021</th>\n",
       "      <th>Q022</th>\n",
       "      <th>Q023</th>\n",
       "      <th>Q024</th>\n",
       "      <th>Q025</th>\n",
       "      <th>NOTA_FINAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>515.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>667.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>570.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>485.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>466.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2238101</th>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>403.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2238102</th>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>444.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2238103</th>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>626.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2238104</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>438.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2238105</th>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>625.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2238106 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         TP_FAIXA_ETARIA  TP_SEXO  TP_ESTADO_CIVIL  TP_COR_RACA  \\\n",
       "0                     12       13                1            1   \n",
       "1                      3       13                1            3   \n",
       "2                      2        6                1            3   \n",
       "3                      8        6                1            3   \n",
       "4                      4        6                1            3   \n",
       "...                  ...      ...              ...          ...   \n",
       "2238101               15        6                1            1   \n",
       "2238102               14       13                2            3   \n",
       "2238103               10       13                1            1   \n",
       "2238104                5        6                1            3   \n",
       "2238105                7        6                1            1   \n",
       "\n",
       "         TP_ST_CONCLUSAO  IN_TREINEIRO  CO_UF_PROVA  TP_LINGUA  Q001  Q002  \\\n",
       "0                      1             0           27          1     2     2   \n",
       "1                      2             0           23          0     2     2   \n",
       "2                      2             0           23          1     4     5   \n",
       "3                      2             0           31          0     2     2   \n",
       "4                      2             0           29          1     4     4   \n",
       "...                  ...           ...          ...        ...   ...   ...   \n",
       "2238101                4             0           35          1     2     2   \n",
       "2238102                1             0           31          1     8     3   \n",
       "2238103                1             0           33          0     5     5   \n",
       "2238104                1             0           13          1     3     8   \n",
       "2238105                1             0           31          0     5     4   \n",
       "\n",
       "         ...  Q017  Q018  Q019  Q020  Q021  Q022  Q023  Q024  Q025  NOTA_FINAL  \n",
       "0        ...     1     1     2     1     1     3     1     1     1      515.50  \n",
       "1        ...     1     1     2     1     1     2     1     2     2      667.60  \n",
       "2        ...     1     1     2     1     2     5     1     2     2      570.06  \n",
       "3        ...     1     1     2     1     1     2     1     1     2      485.60  \n",
       "4        ...     1     2     3     2     1     3     1     1     2      466.94  \n",
       "...      ...   ...   ...   ...   ...   ...   ...   ...   ...   ...         ...  \n",
       "2238101  ...     1     1     2     1     1     4     1     2     2      403.58  \n",
       "2238102  ...     1     1     2     2     1     3     2     2     2      444.14  \n",
       "2238103  ...     1     2     2     1     2     4     2     3     2      626.30  \n",
       "2238104  ...     1     1     2     1     1     3     1     1     2      438.88  \n",
       "2238105  ...     1     2     2     1     2     5     1     3     2      625.36  \n",
       "\n",
       "[2238106 rows x 34 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualização dos dados. Cada linha contém as informações de um aluno que prestou o ENEM2021.\n",
    "# Para compreender os rótulos das respostas, veja o arquivo '1.Analise_tratamento_testes_dos_dados.ipynb'\n",
    "dados3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T12:19:58.142592Z",
     "iopub.status.busy": "2022-12-12T12:19:58.142232Z",
     "iopub.status.idle": "2022-12-12T12:19:58.150058Z",
     "shell.execute_reply": "2022-12-12T12:19:58.148319Z",
     "shell.execute_reply.started": "2022-12-12T12:19:58.142566Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A base de dados foi importada com sucesso!\n"
     ]
    }
   ],
   "source": [
    "#Certificar-se de que todo o arquivo foi baixado/envidado\n",
    "#Deve conter 2238106 linhas por 34 colunas\n",
    "if dados3.shape == (2238106, 34):\n",
    "    print(\"A base de dados foi importada com sucesso!\")\n",
    "else:\n",
    "    print(\"Houve algum erro no carramento ou download da base de dados! Por favor, tente novamente.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T12:19:59.756618Z",
     "iopub.status.busy": "2022-12-12T12:19:59.756281Z",
     "iopub.status.idle": "2022-12-12T12:19:59.922538Z",
     "shell.execute_reply": "2022-12-12T12:19:59.921321Z",
     "shell.execute_reply.started": "2022-12-12T12:19:59.756594Z"
    }
   },
   "outputs": [],
   "source": [
    "# As 33 colunas iniciais são as informações que serão utilizadas para o treino e predição do modelo (features).\n",
    "# A coluna final (a nota final do aluno) é a variável a ser predita.\n",
    "X = dados3.loc[:, dados3.columns != 'NOTA_FINAL']\n",
    "y = dados3['NOTA_FINAL']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T12:20:03.331621Z",
     "iopub.status.busy": "2022-12-12T12:20:03.330513Z",
     "iopub.status.idle": "2022-12-12T12:20:05.533274Z",
     "shell.execute_reply": "2022-12-12T12:20:05.532470Z",
     "shell.execute_reply.started": "2022-12-12T12:20:03.331566Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1790484, 33)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# O algoritmo irá treinar com 80% dos registros (1.790.484), e testar os resultados com os 20% restantes (447.622).\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "treino_X, val_X, treino_y, val_y = train_test_split(X,y,random_state=2,train_size=0.8)\n",
    "treino_X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T12:20:06.154738Z",
     "iopub.status.busy": "2022-12-12T12:20:06.153157Z",
     "iopub.status.idle": "2022-12-12T12:20:06.162462Z",
     "shell.execute_reply": "2022-12-12T12:20:06.161576Z",
     "shell.execute_reply.started": "2022-12-12T12:20:06.154642Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "treino_X.shape[0]+len(val_X) == dados3.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predição da nota final do aluno utilizando o algoritmo <b>Decision Tree</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T12:20:08.484081Z",
     "iopub.status.busy": "2022-12-12T12:20:08.483741Z",
     "iopub.status.idle": "2022-12-12T12:20:09.653737Z",
     "shell.execute_reply": "2022-12-12T12:20:09.652318Z",
     "shell.execute_reply.started": "2022-12-12T12:20:08.484057Z"
    }
   },
   "outputs": [],
   "source": [
    "# Importação das bibliotecas e divisão dos dados em dois conjuntos (treino e teste)\n",
    "from sklearn.tree import DecisionTreeRegressor  \n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "treino_X, val_X, treino_y, val_y = train_test_split(X,y,random_state=2,train_size=0.8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T12:20:12.047386Z",
     "iopub.status.busy": "2022-12-12T12:20:12.047014Z",
     "iopub.status.idle": "2022-12-12T12:20:32.158738Z",
     "shell.execute_reply": "2022-12-12T12:20:32.157465Z",
     "shell.execute_reply.started": "2022-12-12T12:20:12.047359Z"
    }
   },
   "outputs": [],
   "source": [
    "# Cria o modelo, treina e faz a predição da nota final dos alunos no conjunto de teste.\n",
    "# Os testes dos parâmetros a *max_depth* e *min_samples_leaf* a serem utilizados são apresentados no arquivo\n",
    "#    '1.Analise_tratamento_testes_dos_dados.ipynb'\n",
    "\n",
    "modelotree = DecisionTreeRegressor(random_state=1,max_depth=50,min_samples_leaf=10)\n",
    "modelotree.fit(treino_X, treino_y)\n",
    "predicaotree2 = modelotree.predict(val_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-13T03:21:11.422916Z",
     "iopub.status.busy": "2022-12-13T03:21:11.421908Z",
     "iopub.status.idle": "2022-12-13T03:21:11.929832Z",
     "shell.execute_reply": "2022-12-13T03:21:11.928616Z",
     "shell.execute_reply.started": "2022-12-13T03:21:11.422854Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NOTA_FINAL</th>\n",
       "      <th>Nota predita</th>\n",
       "      <th>Erro</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1627203</th>\n",
       "      <td>543.20</td>\n",
       "      <td>570.552308</td>\n",
       "      <td>-27.352308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102228</th>\n",
       "      <td>694.82</td>\n",
       "      <td>558.286154</td>\n",
       "      <td>136.533846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154704</th>\n",
       "      <td>580.12</td>\n",
       "      <td>574.027059</td>\n",
       "      <td>6.092941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>521053</th>\n",
       "      <td>486.20</td>\n",
       "      <td>456.844000</td>\n",
       "      <td>29.356000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1799697</th>\n",
       "      <td>523.50</td>\n",
       "      <td>557.246154</td>\n",
       "      <td>-33.746154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377597</th>\n",
       "      <td>448.62</td>\n",
       "      <td>467.903333</td>\n",
       "      <td>-19.283333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>546042</th>\n",
       "      <td>602.72</td>\n",
       "      <td>514.640000</td>\n",
       "      <td>88.080000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1683346</th>\n",
       "      <td>540.84</td>\n",
       "      <td>517.886667</td>\n",
       "      <td>22.953333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>621487</th>\n",
       "      <td>428.84</td>\n",
       "      <td>547.101429</td>\n",
       "      <td>-118.261429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1470650</th>\n",
       "      <td>659.20</td>\n",
       "      <td>552.910769</td>\n",
       "      <td>106.289231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1167633</th>\n",
       "      <td>477.68</td>\n",
       "      <td>607.148000</td>\n",
       "      <td>-129.468000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1197045</th>\n",
       "      <td>567.94</td>\n",
       "      <td>434.929474</td>\n",
       "      <td>133.010526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2142694</th>\n",
       "      <td>563.46</td>\n",
       "      <td>535.675385</td>\n",
       "      <td>27.784615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>663444</th>\n",
       "      <td>602.94</td>\n",
       "      <td>536.000000</td>\n",
       "      <td>66.940000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415850</th>\n",
       "      <td>423.02</td>\n",
       "      <td>412.952000</td>\n",
       "      <td>10.068000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         NOTA_FINAL  Nota predita        Erro\n",
       "1627203      543.20    570.552308  -27.352308\n",
       "102228       694.82    558.286154  136.533846\n",
       "154704       580.12    574.027059    6.092941\n",
       "521053       486.20    456.844000   29.356000\n",
       "1799697      523.50    557.246154  -33.746154\n",
       "377597       448.62    467.903333  -19.283333\n",
       "546042       602.72    514.640000   88.080000\n",
       "1683346      540.84    517.886667   22.953333\n",
       "621487       428.84    547.101429 -118.261429\n",
       "1470650      659.20    552.910769  106.289231\n",
       "1167633      477.68    607.148000 -129.468000\n",
       "1197045      567.94    434.929474  133.010526\n",
       "2142694      563.46    535.675385   27.784615\n",
       "663444       602.94    536.000000   66.940000\n",
       "415850       423.02    412.952000   10.068000"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Comparando alguns valores preditos com a resposta esperada (a nota final que o aluno realmente tirou)\n",
    "dadostree = pd.DataFrame(val_y)\n",
    "dadostree['Nota predita'] = predicaotree2\n",
    "dadostree['Erro'] = dados3['NOTA_FINAL'] - dadostree['Nota predita']\n",
    "dadostree.sample(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-13T02:23:48.479690Z",
     "iopub.status.busy": "2022-12-13T02:23:48.479140Z",
     "iopub.status.idle": "2022-12-13T02:23:50.724960Z",
     "shell.execute_reply": "2022-12-13T02:23:50.722911Z",
     "shell.execute_reply.started": "2022-12-13T02:23:48.479648Z"
    }
   },
   "outputs": [],
   "source": [
    "dadostree.to_csv('Dadostree.csv',index = True, sep=';', encoding='utf-8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-11T23:00:34.579392Z",
     "iopub.status.busy": "2022-12-11T23:00:34.578869Z",
     "iopub.status.idle": "2022-12-11T23:00:34.592684Z",
     "shell.execute_reply": "2022-12-11T23:00:34.591434Z",
     "shell.execute_reply.started": "2022-12-11T23:00:34.579337Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "62.21512120588078"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cálculo do erro médio na predição das notas no conjunto de treino (447.622 registros).\n",
    "mean_absolute_error(val_y,predicaotree2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Resposta (erro absoluto médio): 62.21512120588078  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-13T02:50:17.095042Z",
     "iopub.status.busy": "2022-12-13T02:50:17.094604Z",
     "iopub.status.idle": "2022-12-13T02:50:20.239010Z",
     "shell.execute_reply": "2022-12-13T02:50:20.237805Z",
     "shell.execute_reply.started": "2022-12-13T02:50:17.095009Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Analisando o erro do modelo num histograma\n",
    "sb.displot(dadostree['Erro'], bins = 50, kde = True)\n",
    "plt.xlim(-300,300)\n",
    "plt.xlabel(\"Erro\",fontsize=12)\n",
    "plt.ylabel(\"Quantidade\",fontsize=12)\n",
    "plt.savefig('ErroTree.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### <b>Conclusão:</b> \n",
    "#### O modelo conseguiu prever a nota final do aluno com um <b>erro médio de aprox. 62,2 pontos</b> para mais ou para menos, sendo o espectro de notas possíveis entre 0 e 1000 pontos. \n",
    "  \n",
    "#### O histograma do erro calculado mostra uma distribuição centrada próxima à zero (na maioria dos casos, o erro é pequeno), e aproximadamente simétrica (o algoritmo erra de forma equivalente para mais ou para menos, não há um viés)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Verificação do modelo utilizando *cross-validation*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T13:38:03.993424Z",
     "iopub.status.busy": "2022-12-12T13:38:03.992963Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "modelotree = DecisionTreeRegressor(random_state=1,max_depth=50,min_samples_leaf=3)\n",
    "\n",
    "#X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20, random_state=0)\n",
    "treino_X, val_X, treino_y, val_y = train_test_split(X,y,random_state=2,train_size=0.8)\n",
    "\n",
    "modelotree2 = DecisionTreeRegressor(random_state=0, max_depth=50,min_samples_leaf=3, criterion='absolute_error')\n",
    "tree_fit = modelotree.fit(treino_X, treino_y)\n",
    "\n",
    "tree_scores = cross_val_score(tree_fit, treino_X, treino_y, scoring='accuracy',cv = 5)\n",
    "print('Score médio na validação cruzada: {}'.format(np.mean(tree_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Resposta: -0.06056625712508743"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### <b>Avaliação:</b>  \n",
    "#### O score médio para 5 rodadas foi de aprox. -0.061, próximo de zero, indicando que não está havendo *overfitting* no modelo. O modelo, considerando o erro médio apresentado, é adequado à predição da nota final de novos alunos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-11T23:11:50.977107Z",
     "iopub.status.busy": "2022-12-11T23:11:50.976519Z",
     "iopub.status.idle": "2022-12-11T23:11:51.050733Z",
     "shell.execute_reply": "2022-12-11T23:11:51.049160Z",
     "shell.execute_reply.started": "2022-12-11T23:11:50.977061Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'tree_scores' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_27/817363721.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtree_scores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'tree_scores' is not defined"
     ]
    }
   ],
   "source": [
    "tree_scores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Resposta:  \n",
    "array([-0.05347239, -0.06362943, -0.05941949, -0.06391427, -0.06239571])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predição da nota final do aluno utilizando o algoritmo <b>K-Nearest Neighbors (KNN)</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A importação das bibliotecas e a manipulação dos dados será feita novamente, possibilitando que este trecho de código seja executado independentemente (não é necesário executar os códigos para o Decision Tree antes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T13:52:58.223621Z",
     "iopub.status.busy": "2022-12-12T13:52:58.223228Z",
     "iopub.status.idle": "2022-12-12T13:52:58.564964Z",
     "shell.execute_reply": "2022-12-12T13:52:58.563771Z",
     "shell.execute_reply.started": "2022-12-12T13:52:58.223591Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(n_neighbors=3)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importação das bibliotecas e divisão dos dados em dois conjuntos (treino e teste)\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# O argumento passado ao KNeighborsRegressor indica o número de vizinhos a serem considerados \n",
    "modelo = KNeighborsRegressor(3)\n",
    "\n",
    "# Treinar o modelo para estimar y (nota final do aluno) a partir das features em X (suas respostas ao questionário)\n",
    "modelo.fit(X,y)\n",
    "\n",
    "# Teste para os 10000 primeiros registros\n",
    "#predicao10000 = modelo.predict(X.head(10000))\n",
    "#mean_absolute_error(y[0:10000],predicao10000)\n",
    "# Resposta: 47.250752"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T13:53:04.173849Z",
     "iopub.status.busy": "2022-12-12T13:53:04.173321Z",
     "iopub.status.idle": "2022-12-12T13:53:05.820474Z",
     "shell.execute_reply": "2022-12-12T13:53:05.819360Z",
     "shell.execute_reply.started": "2022-12-12T13:53:04.173806Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1790484, 33)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Divisão dos dados em dois conjuntos (treino e teste)\n",
    "treino_X, val_X, treino_y, val_y = train_test_split(X,y,random_state=1,train_size=0.8)\n",
    "treino_X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-12T13:53:28.197441Z",
     "iopub.status.busy": "2022-12-12T13:53:28.197045Z",
     "iopub.status.idle": "2022-12-12T17:25:25.140389Z",
     "shell.execute_reply": "2022-12-12T17:25:25.137180Z",
     "shell.execute_reply.started": "2022-12-12T13:53:28.197411Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "65.15513279806027"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cria o modelo, treina e faz a predição da nota final dos alunos no conjunto de teste.\n",
    "# Nos testes realizados, K=3 vizinhos apresentou os melhores resultados,\n",
    "#    sendo observado o aumento do erro absoluto médio para valores maiores (K=5,7)\n",
    "modelo = modelo = KNeighborsRegressor(3)\n",
    "modelo.fit(treino_X, treino_y)\n",
    "predicao = modelo.predict(val_X)\n",
    "\n",
    "mean_absolute_error(val_y,predicao)\n",
    "\n",
    "# 65.15513279806027"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Resposta (erro absoluto médio): 65.15513279806027"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-13T03:27:35.260681Z",
     "iopub.status.busy": "2022-12-13T03:27:35.260233Z",
     "iopub.status.idle": "2022-12-13T03:27:35.698342Z",
     "shell.execute_reply": "2022-12-13T03:27:35.697124Z",
     "shell.execute_reply.started": "2022-12-13T03:27:35.260637Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NOTA_FINAL</th>\n",
       "      <th>Nota predita</th>\n",
       "      <th>Erro</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>176224</th>\n",
       "      <td>540.00</td>\n",
       "      <td>518.393333</td>\n",
       "      <td>21.606667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1088917</th>\n",
       "      <td>451.38</td>\n",
       "      <td>513.046667</td>\n",
       "      <td>-61.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1116215</th>\n",
       "      <td>498.32</td>\n",
       "      <td>578.746667</td>\n",
       "      <td>-80.426667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>785324</th>\n",
       "      <td>663.40</td>\n",
       "      <td>424.720000</td>\n",
       "      <td>238.680000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337145</th>\n",
       "      <td>501.66</td>\n",
       "      <td>588.186667</td>\n",
       "      <td>-86.526667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>816215</th>\n",
       "      <td>711.32</td>\n",
       "      <td>521.213333</td>\n",
       "      <td>190.106667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1941397</th>\n",
       "      <td>474.78</td>\n",
       "      <td>443.253333</td>\n",
       "      <td>31.526667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2029313</th>\n",
       "      <td>566.64</td>\n",
       "      <td>621.886667</td>\n",
       "      <td>-55.246667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>833221</th>\n",
       "      <td>448.70</td>\n",
       "      <td>467.573333</td>\n",
       "      <td>-18.873333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>319588</th>\n",
       "      <td>560.50</td>\n",
       "      <td>500.400000</td>\n",
       "      <td>60.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225654</th>\n",
       "      <td>595.28</td>\n",
       "      <td>635.413333</td>\n",
       "      <td>-40.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>599183</th>\n",
       "      <td>579.44</td>\n",
       "      <td>585.040000</td>\n",
       "      <td>-5.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1935606</th>\n",
       "      <td>556.10</td>\n",
       "      <td>572.900000</td>\n",
       "      <td>-16.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1874450</th>\n",
       "      <td>473.60</td>\n",
       "      <td>437.660000</td>\n",
       "      <td>35.940000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>339196</th>\n",
       "      <td>599.38</td>\n",
       "      <td>594.660000</td>\n",
       "      <td>4.720000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         NOTA_FINAL  Nota predita        Erro\n",
       "176224       540.00    518.393333   21.606667\n",
       "1088917      451.38    513.046667  -61.666667\n",
       "1116215      498.32    578.746667  -80.426667\n",
       "785324       663.40    424.720000  238.680000\n",
       "1337145      501.66    588.186667  -86.526667\n",
       "816215       711.32    521.213333  190.106667\n",
       "1941397      474.78    443.253333   31.526667\n",
       "2029313      566.64    621.886667  -55.246667\n",
       "833221       448.70    467.573333  -18.873333\n",
       "319588       560.50    500.400000   60.100000\n",
       "225654       595.28    635.413333  -40.133333\n",
       "599183       579.44    585.040000   -5.600000\n",
       "1935606      556.10    572.900000  -16.800000\n",
       "1874450      473.60    437.660000   35.940000\n",
       "339196       599.38    594.660000    4.720000"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Comparando alguns valores preditos com a resposta esperada (a nota final que o aluno realmente tirou)\n",
    "dadosK = pd.DataFrame(val_y)\n",
    "dadosK['Nota predita'] = predicao\n",
    "dadosK['Erro'] = dados3['NOTA_FINAL'] - dadosK['Nota predita']\n",
    "dadosK.sample(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-13T02:51:58.091445Z",
     "iopub.status.busy": "2022-12-13T02:51:58.090969Z",
     "iopub.status.idle": "2022-12-13T02:52:01.263193Z",
     "shell.execute_reply": "2022-12-13T02:52:01.261716Z",
     "shell.execute_reply.started": "2022-12-13T02:51:58.091407Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Analisando o erro do modelo num histograma\n",
    "sb.displot(dadosK['Erro'], bins = 50, color='Red',kde = True)\n",
    "plt.xlim(-300,300)\n",
    "plt.xlabel(\"Erro\",fontsize=12)\n",
    "plt.ylabel(\"Quantidade\",fontsize=12)\n",
    "plt.savefig('ErroKNN.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-13T02:25:41.186991Z",
     "iopub.status.busy": "2022-12-13T02:25:41.185343Z",
     "iopub.status.idle": "2022-12-13T02:25:43.332602Z",
     "shell.execute_reply": "2022-12-13T02:25:43.331346Z",
     "shell.execute_reply.started": "2022-12-13T02:25:41.186918Z"
    }
   },
   "outputs": [],
   "source": [
    "dadosK.to_csv('DadosK.csv',index = True, sep=';', encoding='utf-8')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### <b>Conclusão:</b> \n",
    "#### O modelo conseguiu prever a nota final do aluno com um <b>erro médio de aprox. 65,2 pontos</b> para mais ou para menos, sendo o espectro de notas possíveis entre 0 e 1000 pontos.\n",
    "\n",
    "#### O histograma dos erros calculados indica uma distibuição essencialmente uniforme e centrada na origem, indicando que erro menores são os mais frequentes e que proporcionalmente o modelo tanto pode errar para mais quanto para menos.\n",
    "\n",
    "#### Não é mostrada a validação cruzada para o KNN, pois seu processamento é significativamente mais lento.\n",
    "\n",
    "#### Embora apresente um resultado equivalente ao obtido acima com árvores de decisão, a execução utilizando o KNN é significativamente mais lenta, por isso <b>o primeiro método (Decision Tree) foi considerado mais adequado à solução do problema proposto</b>. \n",
    "\n",
    " \n",
    " \n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  \n",
    "  \n",
    "  \n",
    "  \n",
    "## Predição da nota final do aluno utilizando o algoritmo <b>Support-Vector Machine (SVM)</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A importação das bibliotecas e a manipulação dos dados será feita novamente, possibilitando que este trecho de código seja executado independentemente (não é necesário executar os códigos para o Decision Tree antes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-11T23:55:51.927980Z",
     "iopub.status.busy": "2022-12-11T23:55:51.927513Z",
     "iopub.status.idle": "2022-12-11T23:55:53.471002Z",
     "shell.execute_reply": "2022-12-11T23:55:53.469895Z",
     "shell.execute_reply.started": "2022-12-11T23:55:51.927941Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1790484, 33)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importação das bibliotecas e divisão dos dados em dois conjuntos (treino e teste)\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "#from sklearn.grid_search import GridSearchCV\n",
    "\n",
    "treino_X, val_X, treino_y, val_y = train_test_split(X,y,random_state=1,train_size=0.8)\n",
    "treino_X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-11T20:52:05.761433Z",
     "iopub.status.busy": "2022-12-11T20:52:05.761041Z"
    }
   },
   "outputs": [],
   "source": [
    "modeloSVM = StandardScaler()\n",
    "\n",
    "SVM_polinomial = SVR(kernel = 'poly', degree = 3, gamma = 'scale', C = 1.0, coef0 = 2)\n",
    "SVM_polinomial.fit(treino_X, treino_y)\n",
    "\n",
    "#print(SVM_polinomial)\n",
    "predicaoSVM = SVM_polinomial.predict(val_X)\n",
    "mean_absolute_error(val_y,predicaoSVM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-11T23:56:09.348452Z",
     "iopub.status.busy": "2022-12-11T23:56:09.347976Z"
    }
   },
   "outputs": [],
   "source": [
    "modeloSVM = StandardScaler()\n",
    "#treino_X = modeloSVM.fit_transform(treino_X)\n",
    "#val_X = modeloSVM.transform(val_X)\n",
    "\n",
    "SVM_polinomial = SVR(kernel = 'poly', degree = 3, gamma = 'scale', C = 1.0, coef0 = 2)\n",
    "SVM_polinomial.fit(X, y)\n",
    "\n",
    "print(SVM_polinomial)\n",
    "predicaoSVM100 = SVM_polinomial.predict(X.head(100))\n",
    "\n",
    "mean_absolute_error(y[0:100],predicaoSVM100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
